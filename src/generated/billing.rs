// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `billing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:qreeket.ListTransactionsResponse)
pub struct ListTransactionsResponse {
    // message fields
    // @@protoc_insertion_point(field:qreeket.ListTransactionsResponse.transactions)
    pub transactions: ::std::vec::Vec<Transaction>,
    // special fields
    // @@protoc_insertion_point(special_field:qreeket.ListTransactionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListTransactionsResponse {
    fn default() -> &'a ListTransactionsResponse {
        <ListTransactionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListTransactionsResponse {
    pub fn new() -> ListTransactionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transactions",
            |m: &ListTransactionsResponse| { &m.transactions },
            |m: &mut ListTransactionsResponse| { &mut m.transactions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListTransactionsResponse>(
            "ListTransactionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListTransactionsResponse {
    const NAME: &'static str = "ListTransactionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.transactions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListTransactionsResponse {
        ListTransactionsResponse::new()
    }

    fn clear(&mut self) {
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListTransactionsResponse {
        static instance: ListTransactionsResponse = ListTransactionsResponse {
            transactions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListTransactionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListTransactionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListTransactionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTransactionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:qreeket.ChargeRequest)
pub struct ChargeRequest {
    // message fields
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.label)
    pub label: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.amount)
    pub amount: f64,
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.currency)
    pub currency: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.ChargeRequest.customer)
    pub customer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:qreeket.ChargeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargeRequest {
    fn default() -> &'a ChargeRequest {
        <ChargeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ChargeRequest {
    pub fn new() -> ChargeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &ChargeRequest| { &m.label },
            |m: &mut ChargeRequest| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ChargeRequest| { &m.description },
            |m: &mut ChargeRequest| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &ChargeRequest| { &m.amount },
            |m: &mut ChargeRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency",
            |m: &ChargeRequest| { &m.currency },
            |m: &mut ChargeRequest| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &ChargeRequest| { &m.source },
            |m: &mut ChargeRequest| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer",
            |m: &ChargeRequest| { &m.customer },
            |m: &mut ChargeRequest| { &mut m.customer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChargeRequest>(
            "ChargeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChargeRequest {
    const NAME: &'static str = "ChargeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.label = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                25 => {
                    self.amount = is.read_double()?;
                },
                34 => {
                    self.currency = is.read_string()?;
                },
                42 => {
                    self.source = is.read_string()?;
                },
                50 => {
                    self.customer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if self.amount != 0. {
            my_size += 1 + 8;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.currency);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.source);
        }
        if !self.customer.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if self.amount != 0. {
            os.write_double(3, self.amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(4, &self.currency)?;
        }
        if !self.source.is_empty() {
            os.write_string(5, &self.source)?;
        }
        if !self.customer.is_empty() {
            os.write_string(6, &self.customer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChargeRequest {
        ChargeRequest::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.description.clear();
        self.amount = 0.;
        self.currency.clear();
        self.source.clear();
        self.customer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargeRequest {
        static instance: ChargeRequest = ChargeRequest {
            label: ::std::string::String::new(),
            description: ::std::string::String::new(),
            amount: 0.,
            currency: ::std::string::String::new(),
            source: ::std::string::String::new(),
            customer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChargeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:qreeket.ChargeResponse)
pub struct ChargeResponse {
    // message fields
    // @@protoc_insertion_point(field:qreeket.ChargeResponse.transaction_id)
    pub transaction_id: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.ChargeResponse.status)
    pub status: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:qreeket.ChargeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargeResponse {
    fn default() -> &'a ChargeResponse {
        <ChargeResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChargeResponse {
    pub fn new() -> ChargeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transaction_id",
            |m: &ChargeResponse| { &m.transaction_id },
            |m: &mut ChargeResponse| { &mut m.transaction_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ChargeResponse| { &m.status },
            |m: &mut ChargeResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChargeResponse>(
            "ChargeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChargeResponse {
    const NAME: &'static str = "ChargeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transaction_id = is.read_string()?;
                },
                18 => {
                    self.status = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.transaction_id);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.transaction_id.is_empty() {
            os.write_string(1, &self.transaction_id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChargeResponse {
        ChargeResponse::new()
    }

    fn clear(&mut self) {
        self.transaction_id.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargeResponse {
        static instance: ChargeResponse = ChargeResponse {
            transaction_id: ::std::string::String::new(),
            status: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChargeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:qreeket.Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:qreeket.Transaction.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.label)
    pub label: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.amount)
    pub amount: f64,
    // @@protoc_insertion_point(field:qreeket.Transaction.currency)
    pub currency: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.customer)
    pub customer: ::std::string::String,
    // @@protoc_insertion_point(field:qreeket.Transaction.created_at)
    pub created_at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:qreeket.Transaction.updated_at)
    pub updated_at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:qreeket.Transaction.status)
    pub status: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:qreeket.Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Transaction| { &m.id },
            |m: &mut Transaction| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &Transaction| { &m.label },
            |m: &mut Transaction| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Transaction| { &m.description },
            |m: &mut Transaction| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &Transaction| { &m.amount },
            |m: &mut Transaction| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency",
            |m: &Transaction| { &m.currency },
            |m: &mut Transaction| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &Transaction| { &m.source },
            |m: &mut Transaction| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer",
            |m: &Transaction| { &m.customer },
            |m: &mut Transaction| { &mut m.customer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_at",
            |m: &Transaction| { &m.created_at },
            |m: &mut Transaction| { &mut m.created_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "updated_at",
            |m: &Transaction| { &m.updated_at },
            |m: &mut Transaction| { &mut m.updated_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Transaction| { &m.status },
            |m: &mut Transaction| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.label = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                33 => {
                    self.amount = is.read_double()?;
                },
                42 => {
                    self.currency = is.read_string()?;
                },
                50 => {
                    self.source = is.read_string()?;
                },
                58 => {
                    self.customer = is.read_string()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_at)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.updated_at)?;
                },
                82 => {
                    self.status = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.amount != 0. {
            my_size += 1 + 8;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.currency);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.source);
        }
        if !self.customer.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer);
        }
        if let Some(v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.amount != 0. {
            os.write_double(4, self.amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(5, &self.currency)?;
        }
        if !self.source.is_empty() {
            os.write_string(6, &self.source)?;
        }
        if !self.customer.is_empty() {
            os.write_string(7, &self.customer)?;
        }
        if let Some(v) = self.created_at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.updated_at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if !self.status.is_empty() {
            os.write_string(10, &self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.label.clear();
        self.description.clear();
        self.amount = 0.;
        self.currency.clear();
        self.source.clear();
        self.customer.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            id: ::std::string::String::new(),
            label: ::std::string::String::new(),
            description: ::std::string::String::new(),
            amount: 0.,
            currency: ::std::string::String::new(),
            source: ::std::string::String::new(),
            customer: ::std::string::String::new(),
            created_at: ::protobuf::MessageField::none(),
            updated_at: ::protobuf::MessageField::none(),
            status: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rbilling.proto\x12\x07qreeket\x1a\x1bgoogle/protobuf/empty.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.prot\
    o\x1a\x1egoogle/protobuf/duration.proto\"T\n\x18ListTransactionsResponse\
    \x128\n\x0ctransactions\x18\x01\x20\x03(\x0b2\x14.qreeket.TransactionR\
    \x0ctransactions\"\xaf\x01\n\rChargeRequest\x12\x14\n\x05label\x18\x01\
    \x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bde\
    scription\x12\x16\n\x06amount\x18\x03\x20\x01(\x01R\x06amount\x12\x1a\n\
    \x08currency\x18\x04\x20\x01(\tR\x08currency\x12\x16\n\x06source\x18\x05\
    \x20\x01(\tR\x06source\x12\x1a\n\x08customer\x18\x06\x20\x01(\tR\x08cust\
    omer\"O\n\x0eChargeResponse\x12%\n\x0etransaction_id\x18\x01\x20\x01(\tR\
    \rtransactionId\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\"\xcb\
    \x02\n\x0bTransaction\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\
    \n\x05label\x18\x02\x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\
    \x03\x20\x01(\tR\x0bdescription\x12\x16\n\x06amount\x18\x04\x20\x01(\x01\
    R\x06amount\x12\x1a\n\x08currency\x18\x05\x20\x01(\tR\x08currency\x12\
    \x16\n\x06source\x18\x06\x20\x01(\tR\x06source\x12\x1a\n\x08customer\x18\
    \x07\x20\x01(\tR\x08customer\x129\n\ncreated_at\x18\x08\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\t\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x16\n\x06status\
    \x18\n\x20\x01(\tR\x06status2\xb1\x02\n\x0eBillingService\x129\n\x06char\
    ge\x12\x16.qreeket.ChargeRequest\x1a\x17.qreeket.ChargeResponse\x12E\n\
    \x0fget_transaction\x12\x1c.google.protobuf.StringValue\x1a\x14.qreeket.\
    Transaction\x12Q\n\x11list_transactions\x12\x19.google.protobuf.Duration\
    \x1a!.qreeket.ListTransactionsResponse\x12J\n\x12delete_transaction\x12\
    \x1c.google.protobuf.StringValue\x1a\x16.google.protobuf.EmptyB!Z\x1fgit\
    hub.com/qcodelabsllc/qreeketJ\xd4\x0b\n\x06\x12\x04\0\0.\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x10\n\x08\n\x01\x08\
    \x12\x03\x02\06\n\t\n\x02\x08\x0b\x12\x03\x02\06\n\t\n\x02\x03\0\x12\x03\
    \x04\0%\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\t\n\x02\x03\x02\x12\x03\x06\0\
    (\n\t\n\x02\x03\x03\x12\x03\x07\0(\n\n\n\x02\x06\0\x12\x04\n\0\x0f\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\n\x08\x16\n\x0b\n\x04\x06\0\x02\0\x12\x03\x0b\
    \x025\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x0c\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x0b\r\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0b%3\n\
    \x0b\n\x04\x06\0\x02\x01\x12\x03\x0c\x02I\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03\x0c\x06\x15\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0c\x161\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0c<G\n\x0b\n\x04\x06\0\x02\x02\x12\
    \x03\r\x02U\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\r\x06\x17\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\r\x180\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\
    \r;S\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x0e\x02V\n\x0c\n\x05\x06\0\x02\
    \x03\x01\x12\x03\x0e\x06\x18\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x0e\
    \x194\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x0e?T\n\n\n\x02\x04\0\x12\
    \x04\x11\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x20\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x12\x02(\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x12\
    \x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x12\x0b\x16\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x12\x17#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12&'\n\
    \n\n\x02\x04\x01\x12\x04\x15\0\x1c\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\
    \x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x02\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x16\t\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x11\x12\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x17\x02\x19\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x17\t\x14\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03\x17\x17\x18\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x18\x02\x14\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x18\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x18\t\x0f\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x18\x12\x13\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\
    \x19\x02\x16\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x19\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03\x19\t\x11\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03\x19\x14\x15\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x1a\x02\x14\
    \n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03\x1a\t\x0f\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\
    \x1a\x12\x13\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x1b\x02\x16\n\x0c\n\x05\
    \x04\x01\x02\x05\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\
    \x12\x03\x1b\t\x11\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x1b\x14\x15\n\
    \n\n\x02\x04\x02\x12\x04\x1e\0!\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1e\
    \x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1f\x02\x1c\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x1f\t\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1f\x1a\x1b\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x20\x02\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x20\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x20\t\x0f\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x20\x12\x13\n\n\n\x02\x04\x03\x12\x04\
    #\0.\x01\n\n\n\x03\x04\x03\x01\x12\x03#\x08\x13\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03$\x02\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03$\x02\x08\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03$\t\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03$\x0e\x0f\n\x0b\n\x04\x04\x03\x02\x01\x12\x03%\x02\x13\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03%\t\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03%\x11\x12\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x03&\x02\x19\n\x0c\n\x05\x04\x03\x02\x02\
    \x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03&\t\x14\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03&\x17\x18\n\x0b\n\x04\x04\x03\x02\
    \x03\x12\x03'\x02\x14\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03'\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x03\x01\x12\x03'\t\x0f\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03'\x12\x13\n\x0b\n\x04\x04\x03\x02\x04\x12\x03(\x02\x16\n\
    \x0c\n\x05\x04\x03\x02\x04\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x04\x01\x12\x03(\t\x11\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03(\x14\x15\
    \n\x0b\n\x04\x04\x03\x02\x05\x12\x03)\x02\x14\n\x0c\n\x05\x04\x03\x02\
    \x05\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03)\t\x0f\
    \n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03)\x12\x13\n\x0b\n\x04\x04\x03\
    \x02\x06\x12\x03*\x02\x16\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03*\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03*\t\x11\n\x0c\n\x05\x04\x03\
    \x02\x06\x03\x12\x03*\x14\x15\n\x0b\n\x04\x04\x03\x02\x07\x12\x03+\x02+\
    \n\x0c\n\x05\x04\x03\x02\x07\x06\x12\x03+\x02\x1b\n\x0c\n\x05\x04\x03\
    \x02\x07\x01\x12\x03+\x1c&\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03+)*\n\
    \x0b\n\x04\x04\x03\x02\x08\x12\x03,\x02+\n\x0c\n\x05\x04\x03\x02\x08\x06\
    \x12\x03,\x02\x1b\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x03,\x1c&\n\x0c\n\
    \x05\x04\x03\x02\x08\x03\x12\x03,)*\n\x0b\n\x04\x04\x03\x02\t\x12\x03-\
    \x02\x15\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\t\x01\x12\x03-\t\x0f\n\x0c\n\x05\x04\x03\x02\t\x03\x12\x03-\x12\
    \x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ListTransactionsResponse::generated_message_descriptor_data());
            messages.push(ChargeRequest::generated_message_descriptor_data());
            messages.push(ChargeResponse::generated_message_descriptor_data());
            messages.push(Transaction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
